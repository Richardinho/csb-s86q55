{"version":3,"sources":["src/index.js"],"names":["state","foo","watchers","watch","watchExpression","listener","push","newValue","digest","forEach","watcher","el","document","querySelector","console","log","unsubscribe","oldValue","textContent","addEventListener"],"mappings":";AAAA,IAAMA,EAAQ,CACZC,IAAK,eAGDC,EAAW,GAGjB,SAASC,EAAMC,EAAiBC,GAQvB,OAFPH,EAASI,KALO,WACRC,IAAAA,EAAWH,EAAgBJ,GACjCK,EAASE,KAKJ,aAMT,SAASC,IACPN,EAASO,QAAQ,SAACC,GAAYA,OAAAA,MAGhC,IAAMN,EAAkB,SAACJ,GAChBA,OAAAA,MAAAA,OAAAA,EAAAA,EAAOC,KAGVU,EAAKC,SAASC,cAAc,QAElC,GADAC,QAAQC,IAAIJ,GACRA,EAAI,CACAK,IAAAA,EAAcb,EAAMC,EAAiB,SAACG,EAAUU,GACpDN,EAAGO,YAAcX,IAInBI,EAAGQ,iBAAiB,QAAS,WAC3BnB,EAAMC,IAAM,sBACZO,MAGFA","file":"src.ba486e21.js","sourceRoot":"..","sourcesContent":["const state = {\n  foo: \"this is foo\"\n};\n\nconst watchers = [];\n\n// registers a listener for watch expression\nfunction watch(watchExpression, listener) {\n  const watcher = () => {\n    const newValue = watchExpression(state);\n    listener(newValue);\n  };\n\n  watchers.push(watcher);\n\n  return function unsubscribe() {\n    // remove watcher from watchers\n  };\n}\n\n//  runs all the watchers\nfunction digest() {\n  watchers.forEach((watcher) => watcher());\n}\n\nconst watchExpression = (state) => {\n  return state?.foo;\n};\n\nconst el = document.querySelector(\"#foo\");\nconsole.log(el);\nif (el) {\n  const unsubscribe = watch(watchExpression, (newValue, oldValue) => {\n    el.textContent = newValue;\n  });\n\n  // now we can update state in event listeners and the UI updates automatically\n  el.addEventListener(\"click\", () => {\n    state.foo = \"this is another foo\";\n    digest();\n  });\n\n  digest();\n}\n"]}